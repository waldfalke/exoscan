
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
// –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (F12)

(async function automateCameraTest() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã...');
    
    const results = {
        timestamp: new Date().toISOString(),
        tests: []
    };
    
    function addResult(test, status, message, data = null) {
        const result = { test, status, message, data, timestamp: new Date().toISOString() };
        results.tests.push(result);
        console.log(`[${status}] ${test}: ${message}`);
        return result;
    }
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ MediaDevices
    try {
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            addResult('MediaDevices Support', '‚úÖ', 'getUserMedia –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        } else {
            addResult('MediaDevices Support', '‚ùå', 'getUserMedia –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            return results;
        }
    } catch (error) {
        addResult('MediaDevices Support', '‚ùå', `–û—à–∏–±–∫–∞: ${error.message}`);
        return results;
    }
    
    // –¢–µ—Å—Ç 2: –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    try {
        const devices = await navigator.mediaDevices.enumerateDevices();
        const videoDevices = devices.filter(d => d.kind === 'videoinput');
        addResult('Device Enumeration', '‚úÖ', `–ù–∞–π–¥–µ–Ω–æ ${videoDevices.length} –≤–∏–¥–µ–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤`, videoDevices);
    } catch (error) {
        addResult('Device Enumeration', '‚ùå', `–û—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    try {
        const permissionStatus = await navigator.permissions.query({name: 'camera'});
        addResult('Camera Permissions', '‚úÖ', `–°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${permissionStatus.state}`, {state: permissionStatus.state});
    } catch (error) {
        addResult('Camera Permissions', '‚ö†Ô∏è', `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${error.message}`);
    }
    
    // –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    const constraintTests = [
        {
            name: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ',
            constraints: { video: { facingMode: { ideal: "environment" } } }
        },
        {
            name: '–ë–∞–∑–æ–≤—ã–µ',
            constraints: { video: { facingMode: { ideal: "environment" }, width: { ideal: 1280 }, height: { ideal: 720 } } }
        },
        {
            name: '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ',
            constraints: { video: { facingMode: { ideal: "environment" }, width: { ideal: 1920 }, height: { ideal: 1080 }, frameRate: { ideal: 30 } } }
        }
    ];
    
    for (const test of constraintTests) {
        try {
            const stream = await navigator.mediaDevices.getUserMedia(test.constraints);
            const track = stream.getVideoTracks()[0];
            const settings = track.getSettings();
            
            addResult(`Constraints: ${test.name}`, '‚úÖ', `–£—Å–ø–µ—à–Ω–æ: ${settings.width}x${settings.height}`, settings);
            
            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            stream.getTracks().forEach(track => track.stop());
        } catch (error) {
            addResult(`Constraints: ${test.name}`, '‚ùå', `–û—à–∏–±–∫–∞: ${error.message}`);
        }
    }
    
    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    addResult('Secure Context', window.isSecureContext ? '‚úÖ' : '‚ùå', `–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: ${window.isSecureContext}`);
    
    // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS
    addResult('HTTPS', location.protocol === 'https:' ? '‚úÖ' : '‚ö†Ô∏è', `–ü—Ä–æ—Ç–æ–∫–æ–ª: ${location.protocol}`);
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', results);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ localStorage
    localStorage.setItem('cameraTestResults', JSON.stringify(results));
    console.log('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
    
    return results;
})();
