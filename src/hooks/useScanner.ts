/**
 * React —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫–∞–Ω–µ—Ä–æ–º —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤
 */

import { useState, useEffect, useRef, useCallback } from 'react'
import { 
  ScannerService, 
  ScanResult, 
  ScannerCapabilities, 
  CameraPermissionStatus,
  ScannerFactory,
  ScannerFactoryConfig 
} from '@/services/scanner'

export interface UseScannerOptions extends ScannerFactoryConfig {
  autoStart?: boolean
  autoScan?: boolean
  scanInterval?: number
  enableDiagnostics?: boolean
  onScanSuccess?: (result: ScanResult) => void
  onScanError?: (error: Error) => void
  onPermissionChange?: (status: CameraPermissionStatus) => void
}

export interface UseScannerReturn {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–∞–Ω–µ—Ä–∞
  isInitialized: boolean
  isScanning: boolean
  scanningActive: boolean
  error: Error | null
  capabilities: ScannerCapabilities | null
  permissionStatus: CameraPermissionStatus

  // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  startScanning: (videoElement: HTMLVideoElement) => Promise<void>
  stopScanning: () => Promise<void>
  scanFromImage: (imageFile: File) => Promise<ScanResult>
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π
  switchCamera: () => Promise<void>
  toggleFlashlight: () => Promise<void>
  setZoom: (zoom: number) => Promise<void>
  getAvailableCameras: () => Promise<MediaDeviceInfo[]>
  getCameraPermissionStatus: () => Promise<CameraPermissionStatus>
  getCurrentCameraId: () => string | null
  setFlashlight: (enabled: boolean) => Promise<void>
  
  // –£—Ç–∏–ª–∏—Ç—ã
  reinitialize: () => Promise<void>
  dispose: () => void
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä—ã
  flashlightEnabled: boolean
  zoom: number
  availableCameras: MediaDeviceInfo[]
  currentCameraId: string | null
}

export function useScanner(options: UseScannerOptions = {}): UseScannerReturn {
  const {
    autoStart = false,
    onScanSuccess,
    onScanError,
    onPermissionChange,
    ...scannerConfig
  } = options

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const [isInitialized, setIsInitialized] = useState(false)
  const [isScanning, setIsScanning] = useState(false)
  const [scanningActive, setScanningActive] = useState(false)
  const [error, setError] = useState<Error | null>(null)
  const [capabilities, setCapabilities] = useState<ScannerCapabilities | null>(null)
  const [permissionStatus, setPermissionStatus] = useState<CameraPermissionStatus>({
    granted: false,
    denied: false,
    prompt: true
  })
  const [flashlightEnabled, setFlashlightEnabled] = useState(false)
  const [zoom, setZoomState] = useState(1)
  const [availableCameras, setAvailableCameras] = useState<MediaDeviceInfo[]>([])
  const [currentCameraId, setCurrentCameraId] = useState<string | null>(null)

  // –°—Å—ã–ª–∫–∏
  const scannerRef = useRef<ScannerService | null>(null)
  const videoElementRef = useRef<HTMLVideoElement | null>(null)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞
  const initializeScanner = useCallback(async () => {
    try {
      setError(null)
      console.log('üîÑ useScanner: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞...')

      const scanner = await ScannerFactory.createScanner(scannerConfig)
      scannerRef.current = scanner

      // –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
      const caps = await scanner.getCapabilities()
      setCapabilities(caps)

      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–º–µ—Ä—ã
      const cameras = await scanner.getAvailableCameras()
      setAvailableCameras(cameras)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      const permission = await scanner.getCameraPermissionStatus()
      setPermissionStatus(permission)

      setIsInitialized(true)
      console.log('‚úÖ useScanner: –°–∫–∞–Ω–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', { caps, cameras, permission })

      // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
      if (autoStart && videoElementRef.current) {
        await startScanning(videoElementRef.current)
      }

    } catch (err) {
      const error = err instanceof Error ? err : new Error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫–∞–Ω–µ—Ä–∞')
      setError(error)
      onScanError?.(error)
      console.error('‚ùå useScanner: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error)
    }
  }, [scannerConfig, autoStart, onScanError])

  // –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const startScanning = useCallback(async (videoElement: HTMLVideoElement) => {
    if (!scannerRef.current || !isInitialized) {
      throw new Error('–°–∫–∞–Ω–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
    }

    try {
      setError(null)
      setIsScanning(true)
      videoElementRef.current = videoElement

      console.log('‚ñ∂Ô∏è useScanner: –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...')
      console.log('üîç useScanner: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º:', {
        scannerType: scannerRef.current.constructor.name,
        videoElement: {
          readyState: videoElement.readyState,
          videoWidth: videoElement.videoWidth,
          videoHeight: videoElement.videoHeight,
          srcObject: !!videoElement.srcObject,
          autoplay: videoElement.autoplay,
          muted: videoElement.muted,
          playsInline: videoElement.playsInline
        },
        capabilities,
        permissionStatus
      })

      await scannerRef.current.startScanning(
        videoElement,
        (result: ScanResult) => {
          setScanningActive(true)
          onScanSuccess?.(result)
          console.log('‚úÖ useScanner: –£—Å–ø–µ—à–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:', result)
        },
        (error: Error) => {
          setScanningActive(false)
          setError(error)
          onScanError?.(error)
          console.error('‚ùå useScanner: –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
        }
      )

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä—ã
      const currentCamera = await scannerRef.current.getCurrentCameraId()
      setCurrentCameraId(currentCamera)

      console.log('‚úÖ useScanner: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')

    } catch (err) {
      const error = err instanceof Error ? err : new Error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
      console.error('‚ùå useScanner: –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', {
        error: error.message,
        stack: error.stack,
        videoElement: {
          readyState: videoElement.readyState,
          srcObject: !!videoElement.srcObject
        }
      })
      setError(error)
      setIsScanning(false)
      onScanError?.(error)
      throw error
    }
  }, [isInitialized, onScanSuccess, onScanError, capabilities, permissionStatus])

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const stopScanning = useCallback(async () => {
    if (!scannerRef.current) return

    try {
      console.log('‚èπÔ∏è useScanner: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...')
      await scannerRef.current.stopScanning()
      setIsScanning(false)
      setScanningActive(false)
      setFlashlightEnabled(false)
      setZoomState(1)
    } catch (err) {
      const error = err instanceof Error ? err : new Error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
      setError(error)
      console.error('‚ùå useScanner: –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:', error)
    }
  }, [])

  // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const scanFromImage = useCallback(async (imageFile: File): Promise<ScanResult> => {
    if (!scannerRef.current || !isInitialized) {
      throw new Error('–°–∫–∞–Ω–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
    }

    try {
      setError(null)
      console.log('üì∑ useScanner: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...', imageFile.name)
      
      const result = await scannerRef.current.scanFromImage(imageFile)
      console.log('‚úÖ useScanner: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', result)
      
      onScanSuccess?.(result)
      return result
    } catch (err) {
      const error = err instanceof Error ? err : new Error('–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
      setError(error)
      onScanError?.(error)
      throw error
    }
  }, [isInitialized, onScanSuccess, onScanError])

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
  const switchCamera = useCallback(async () => {
    if (!scannerRef.current || !isScanning) return

    try {
      await scannerRef.current.switchCamera()
      const newCameraId = await scannerRef.current.getCurrentCameraId()
      setCurrentCameraId(newCameraId)
      console.log('üîÑ useScanner: –ö–∞–º–µ—Ä–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞:', newCameraId)
    } catch (err) {
      const error = err instanceof Error ? err : new Error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã')
      setError(error)
      console.error('‚ùå useScanner: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã:', error)
    }
  }, [isScanning])

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ–Ω–∞—Ä–∏–∫–∞
  const toggleFlashlight = useCallback(async () => {
    if (!scannerRef.current || !isScanning) return

    try {
      const newState = !flashlightEnabled
      await scannerRef.current.setFlashlight(newState)
      setFlashlightEnabled(newState)
      console.log('üî¶ useScanner: –§–æ–Ω–∞—Ä–∏–∫:', newState ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω')
    } catch (err) {
      const error = err instanceof Error ? err : new Error('–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞—Ä–∏–∫–æ–º')
      setError(error)
      console.error('‚ùå useScanner: –û—à–∏–±–∫–∞ —Ñ–æ–Ω–∞—Ä–∏–∫–∞:', error)
    }
  }, [flashlightEnabled, isScanning])

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑—É–º–∞
  const setZoom = useCallback(async (newZoom: number) => {
    if (!scannerRef.current || !isScanning) {
      console.log('‚ö†Ô∏è useScanner: –ó—É–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å–∫–∞–Ω–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∑—É–º–∞
    if (!capabilities?.zoom?.supported) {
      console.log('‚ö†Ô∏è useScanner: –ó—É–º –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∫–∞–º–µ—Ä–æ–π')
      return
    }

    try {
      await scannerRef.current.setZoom(newZoom)
      setZoomState(newZoom)
      console.log('üîç useScanner: –ó—É–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', newZoom)
    } catch (err) {
      const error = err instanceof Error ? err : new Error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑—É–º–∞')
      // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º error –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑—É–º–∞ - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
      console.warn('‚ö†Ô∏è useScanner: –ó—É–º –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', error.message)
    }
  }, [isScanning, capabilities])

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä
  const getAvailableCameras = useCallback(async (): Promise<MediaDeviceInfo[]> => {
    if (!scannerRef.current) {
      throw new Error('–°–∫–∞–Ω–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
    }
    
    try {
      const cameras = await scannerRef.current.getAvailableCameras()
      setAvailableCameras(cameras)
      return cameras
    } catch (err) {
      const error = err instanceof Error ? err : new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–º–µ—Ä')
      setError(error)
      throw error
    }
  }, [])

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∫–∞–º–µ—Ä—ã
  const getCameraPermissionStatus = useCallback(async (): Promise<CameraPermissionStatus> => {
    if (!scannerRef.current) {
      throw new Error('–°–∫–∞–Ω–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
    }
    
    try {
      const status = await scannerRef.current.getCameraPermissionStatus()
      setPermissionStatus(status)
      return status
    } catch (err) {
      const error = err instanceof Error ? err : new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π')
      setError(error)
      throw error
    }
  }, [])

  // –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–π –∫–∞–º–µ—Ä—ã
  const getCurrentCameraId = useCallback((): string | null => {
    if (!scannerRef.current) {
      return null
    }
    
    return scannerRef.current.getCurrentCameraId()
  }, [])

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ–Ω–∞—Ä–∏–∫–∞
  const setFlashlight = useCallback(async (enabled: boolean): Promise<void> => {
    if (!scannerRef.current || !isScanning) {
      throw new Error('–°–∫–∞–Ω–µ—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω')
    }

    try {
      await scannerRef.current.setFlashlight(enabled)
      setFlashlightEnabled(enabled)
      console.log('üî¶ useScanner: –§–æ–Ω–∞—Ä–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', enabled)
    } catch (err) {
      const error = err instanceof Error ? err : new Error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ–Ω–∞—Ä–∏–∫–∞')
      setError(error)
      throw error
    }
  }, [isScanning])

  // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  const reinitialize = useCallback(async () => {
    if (scannerRef.current) {
      await stopScanning()
      scannerRef.current.dispose()
      scannerRef.current = null
    }
    
    setIsInitialized(false)
    setError(null)
    await initializeScanner()
  }, [stopScanning, initializeScanner])

  // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  const dispose = useCallback(() => {
    if (scannerRef.current) {
      scannerRef.current.dispose()
      scannerRef.current = null
    }
    
    setIsInitialized(false)
    setIsScanning(false)
    setScanningActive(false)
    setError(null)
    setCapabilities(null)
    setFlashlightEnabled(false)
    setZoomState(1)
    setAvailableCameras([])
    setCurrentCameraId(null)
    
    console.log('üóëÔ∏è useScanner: –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã')
  }, [])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    console.log('üöÄ useScanner: –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...')
    initializeScanner().catch(err => {
      console.error('‚ùå useScanner: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', err)
    })
    
    return () => {
      console.log('üßπ useScanner: –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏')
      if (scannerRef.current) {
        scannerRef.current.dispose()
        scannerRef.current = null
      }
    }
  }, []) // –¢–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  useEffect(() => {
    if (onPermissionChange) {
      onPermissionChange(permissionStatus)
    }
  }, [permissionStatus, onPermissionChange])

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isInitialized,
    isScanning,
    scanningActive,
    error,
    capabilities,
    permissionStatus,
    
    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    startScanning,
    stopScanning,
    scanFromImage,
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π
    switchCamera,
    toggleFlashlight,
    setZoom,
    getAvailableCameras,
    getCameraPermissionStatus,
    getCurrentCameraId,
    setFlashlight,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    reinitialize,
    dispose,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä—ã
    flashlightEnabled,
    zoom,
    availableCameras,
    currentCameraId
  }
}