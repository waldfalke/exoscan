import { BrowserMultiFormatReader } from '@zxing/library'

// Type for navigator with mediaDevices support
interface NavigatorWithMediaDevices extends Navigator {
  mediaDevices: MediaDevices
}

// Extended MediaTrackSettings interface to include torch property
interface ExtendedMediaTrackSettings extends MediaTrackSettings {
  torch?: boolean
}

// Extended MediaTrackConstraints interface to include torch property
interface ExtendedMediaTrackConstraints extends MediaTrackConstraints {
  torch?: boolean
  focusMode?: { ideal: string }
  exposureMode?: { ideal: string }
  whiteBalanceMode?: { ideal: string }
  focusDistance?: { ideal: number; max: number }
}

export interface ScanResult {
  text: string
  format: string
  timestamp: Date
}

export interface CameraPermissionStatus {
  granted: boolean
  denied: boolean
  prompt: boolean
  error?: string
}

export interface FlashlightCapabilities {
  supported: boolean
  enabled: boolean
  track?: MediaStreamTrack
}

export class BarcodeScanner {
  private reader: BrowserMultiFormatReader
  private isScanning: boolean = false
  private currentStream: MediaStream | null = null
  private flashlightTrack: MediaStreamTrack | null = null
  private currentVideoElement: HTMLVideoElement | null = null
  private autoScanInterval: NodeJS.Timeout | null = null
  private videoHealthInterval: NodeJS.Timeout | null = null

  constructor() {
    this.reader = new BrowserMultiFormatReader()
  }

  // Check if camera API is supported
  static isCameraSupported(): boolean {
    return !!(typeof navigator !== 'undefined' && (navigator as NavigatorWithMediaDevices).mediaDevices)
  }

  // Check if HTTPS is being used (required for camera on mobile)
  static isSecureContext(): boolean {
    return window.isSecureContext || location.protocol === 'https:' || location.hostname === 'localhost'
  }

  // Check flashlight/torch support
  async checkFlashlightSupport(stream?: MediaStream): Promise<FlashlightCapabilities> {
    try {
      const targetStream = stream || this.currentStream
      if (!targetStream) {
        return { supported: false, enabled: false }
      }

      const videoTrack = targetStream.getVideoTracks()[0]
      if (!videoTrack) {
        return { supported: false, enabled: false }
      }

      const capabilities = videoTrack.getCapabilities ? videoTrack.getCapabilities() : {}
      const settings = videoTrack.getSettings ? videoTrack.getSettings() : {}
      
      // Check if torch is supported
      const torchSupported = 'torch' in capabilities
      const currentTorchState = 'torch' in settings ? Boolean((settings as ExtendedMediaTrackSettings).torch) : false

      if (torchSupported) {
        this.flashlightTrack = videoTrack
      }

      return {
        supported: torchSupported,
        enabled: currentTorchState,
        track: torchSupported ? videoTrack : undefined
      }
    } catch (error) {
      console.warn('Failed to check flashlight support:', error)
      return { supported: false, enabled: false }
    }
  }

  // Toggle flashlight/torch
  async toggleFlashlight(enable?: boolean): Promise<boolean> {
    try {
      if (!this.flashlightTrack) {
        console.warn('Flashlight track not available')
        return false
      }

      const capabilities = this.flashlightTrack.getCapabilities ? this.flashlightTrack.getCapabilities() : {}
      if (!('torch' in capabilities)) {
        console.warn('Torch not supported on this device')
        return false
      }

      const settings = this.flashlightTrack.getSettings ? this.flashlightTrack.getSettings() : {}
      const currentState = 'torch' in settings ? (settings as ExtendedMediaTrackSettings).torch : false
      const newState = enable !== undefined ? enable : !currentState

      await this.flashlightTrack.applyConstraints({
        advanced: [{ torch: newState } as ExtendedMediaTrackConstraints]
      })

      console.log(`Flashlight ${newState ? 'enabled' : 'disabled'}`)
      return newState
    } catch (error) {
      console.error('Failed to toggle flashlight:', error)
      return false
    }
  }

  // Get optimal camera constraints for scanning
  private getOptimalCameraConstraints(deviceId?: string, isMobile: boolean = false): MediaStreamConstraints {
    // Detect Android devices for specific optimizations
    const isAndroid = /Android/i.test(navigator.userAgent)
    const isChrome = /Chrome/i.test(navigator.userAgent)
    
    console.log(`üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${isAndroid ? 'Android' : '–î—Ä—É–≥–æ–µ'}, –ë—Ä–∞—É–∑–µ—Ä: ${isChrome ? 'Chrome' : '–î—Ä—É–≥–æ–π'}`)
    
    const videoConstraints: MediaTrackConstraints = {
      deviceId: deviceId ? { ideal: deviceId } : undefined,
      facingMode: deviceId ? undefined : { ideal: 'environment' },
      
      // Optimized resolution - use ideal without strict minimums
      width: { ideal: isMobile ? 1280 : 1920 },
      height: { ideal: isMobile ? 720 : 1080 },
      
      // Frame rate optimization
      frameRate: { ideal: 30 },
    }

    // Add Android-specific camera optimizations
    if (isAndroid) {
      const extendedConstraints = videoConstraints as ExtendedMediaTrackConstraints
      
      // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ –¥–ª—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤
      extendedConstraints.focusMode = { ideal: 'manual' };
      
      // Enable auto exposure for varying lighting conditions
      extendedConstraints.exposureMode = { ideal: 'continuous' };
      
      // Enable auto white balance
      extendedConstraints.whiteBalanceMode = { ideal: 'continuous' };
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 20-30 —Å–º –¥–ª—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤
      extendedConstraints.focusDistance = { ideal: 0.25, max: 0.35 };
      
      // Enable torch capability detection
      extendedConstraints.torch = false;  // Start with torch off
      
      console.log('üîß –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è Android –∫–∞–º–µ—Ä—ã —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–æ–π');
    }

    const baseConstraints: MediaStreamConstraints = {
      video: videoConstraints
    }

    return baseConstraints
  }

  // Fallback constraints for when optimal constraints fail
  private getBasicCameraConstraints(deviceId?: string): MediaStreamConstraints {
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent)
    return {
      video: {
        deviceId: deviceId ? { ideal: deviceId } : undefined,
        facingMode: deviceId ? undefined : (isIOS ? { exact: 'environment' } : { ideal: 'environment' }),
        frameRate: { ideal: 30 }
      }
    }
  }

  // Minimal constraints as last resort
  private getMinimalCameraConstraints(deviceId?: string): MediaStreamConstraints {
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent)
    return {
      video: deviceId
        ? { deviceId: { ideal: deviceId } }
        : { facingMode: isIOS ? { exact: 'environment' } : { ideal: 'environment' } }
    }
  }

  // Check camera permissions
  async checkCameraPermission(): Promise<CameraPermissionStatus> {
    if (!BarcodeScanner.isCameraSupported()) {
      return {
        granted: false,
        denied: true,
        prompt: false,
        error: 'Camera API not supported in this browser'
      }
    }

    if (!BarcodeScanner.isSecureContext()) {
      return {
        granted: false,
        denied: true,
        prompt: false,
        error: 'HTTPS required for camera access on mobile devices'
      }
    }

    try {
      // Check permission status if available
      if ('permissions' in navigator) {
        const permission = await navigator.permissions.query({ name: 'camera' as PermissionName })
        return {
          granted: permission.state === 'granted',
          denied: permission.state === 'denied',
          prompt: permission.state === 'prompt'
        }
      }

      // Fallback: try to access camera briefly
      if (typeof navigator !== 'undefined' && (navigator as NavigatorWithMediaDevices).mediaDevices) {
        try {
          const stream = await (navigator as NavigatorWithMediaDevices).mediaDevices.getUserMedia({ 
            video: { facingMode: 'environment' } 
          })
          stream.getTracks().forEach((track: MediaStreamTrack) => track.stop())
          return { granted: true, denied: false, prompt: false }
        } catch (error) {
          const err = error as Error
          if (err.name === 'NotAllowedError' || err.name === 'PermissionDeniedError') {
            return { granted: false, denied: true, prompt: false, error: 'Camera permission denied' }
          }
          return { granted: false, denied: false, prompt: true, error: err.message }
        }
      }
      
      // If mediaDevices is not available, return unknown state
      return { granted: false, denied: false, prompt: true, error: 'Camera API not available' }
    } catch (error) {
      return {
        granted: false,
        denied: false,
        prompt: true,
        error: (error as Error).message
      }
    }
  }

  // Request camera permission explicitly
  async requestCameraPermission(): Promise<boolean> {
    try {
      if (typeof navigator === 'undefined' || !(navigator as NavigatorWithMediaDevices).mediaDevices) {
        console.error('‚ùå MediaDevices API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
        return false
      }

      console.log('üì± –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...')
      
      // Try with environment camera first (back camera)
      try {
        const stream = await (navigator as NavigatorWithMediaDevices).mediaDevices.getUserMedia({
          video: {
            facingMode: 'environment',
            width: { ideal: 1280, min: 640, max: 1920 },
            height: { ideal: 720, min: 480, max: 1080 },
            frameRate: { ideal: 30, min: 15, max: 60 }
          }
        })
        
        console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –¥–ª—è –∑–∞–¥–Ω–µ–π –∫–∞–º–µ—Ä—ã')
        // Stop the stream immediately, we just wanted permission
        stream.getTracks().forEach((track: MediaStreamTrack) => track.stop())
        return true
      } catch (envError) {
        console.warn('‚ö†Ô∏è –ó–∞–¥–Ω—è—è –∫–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–¥–Ω—é—é:', envError)
        
        // Fallback to user camera (front camera)
        const stream = await (navigator as NavigatorWithMediaDevices).mediaDevices.getUserMedia({
          video: {
            facingMode: 'user',
            width: { ideal: 1280, min: 640, max: 1920 },
            height: { ideal: 720, min: 480, max: 1080 },
            frameRate: { ideal: 30, min: 15, max: 60 }
          }
        })
        
        console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –¥–ª—è –ø–µ—Ä–µ–¥–Ω–µ–π –∫–∞–º–µ—Ä—ã')
        // Stop the stream immediately, we just wanted permission
        stream.getTracks().forEach((track: MediaStreamTrack) => track.stop())
        return true
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã:', error)
      const err = error as Error
      if (err.name === 'NotAllowedError') {
        console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ')
      } else if (err.name === 'NotFoundError') {
        console.error('‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ')
      } else if (err.name === 'NotReadableError') {
        console.error('‚ùå –ö–∞–º–µ—Ä–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º')
      } else if (err.name === 'OverconstrainedError') {
        console.error('‚ùå –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è')
      }
      return false
    }
  }

  async startScanning(
    videoElement: HTMLVideoElement,
    onResult: (result: ScanResult) => void,
    onError?: (error: Error) => void,
    captureMode: 'auto' | 'manual' = 'auto',
    deviceId?: string
  ): Promise<void> {
    if (this.isScanning) {
      throw new Error('Scanner is already running')
    }

    // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –ø–µ—Ä–µ–¥ ZXing
    let streamBeforeZXing: MediaStream | null = null

    try {
      this.isScanning = true
      this.currentVideoElement = videoElement
      console.log('üì± BarcodeScanner: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
      console.log('üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ:', {
        userAgent: navigator.userAgent,
        platform: navigator.platform,
        language: navigator.language,
        cookieEnabled: navigator.cookieEnabled,
        onLine: navigator.onLine
      })

      // Check camera support and permissions first
      console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∫–∞–º–µ—Ä—ã...')
      const permissionStatus = await this.checkCameraPermission()
      console.log('üîê –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', permissionStatus)
      
      if (!permissionStatus.granted) {
        // Early notification of access-related issues detected during permission check
        if (onError && permissionStatus.error) {
          const lower = permissionStatus.error.toLowerCase()
          if (
            lower.includes('permission') ||
            lower.includes('denied') ||
            lower.includes('access') ||
            lower.includes('busy') ||
            lower.includes('notreadable') ||
            lower.includes('notallowed')
          ) {
            onError(new Error(`–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ: ${permissionStatus.error}`))
          }
        }
        
        if (permissionStatus.denied) {
          console.error('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ:', permissionStatus.error)
          throw new Error(permissionStatus.error || 'Camera permission denied. Please enable camera access in your browser settings.')
        }
        
        // Try to request permission
        console.log('üîÑ –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã...')
        const granted = await this.requestCameraPermission()
        if (!granted) {
          console.error('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ')
          if (onError) {
            onError(new Error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ: —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ'))
          }
          throw new Error('Camera permission is required for scanning. Please allow camera access and try again.')
        }
        console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ–ª—É—á–µ–Ω–æ')
      }

      // Check MediaDevices API availability
      if (!navigator.mediaDevices) {
        console.warn('‚ö†Ô∏è MediaDevices API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø–æ—Ç–æ–∫–∞')
        // –í —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞
        if (captureMode === 'auto') {
          this.setupAutoScanning(videoElement, (result: ScanResult) => {
            if (this.isScanning) {
              onResult(result)
            }
          }, onError)
          console.log('‚úÖ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (—Å–∏–º—É–ª—è—Ü–∏—è)')
          return
        } else {
          console.log('üì∑ –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º (—Å–∏–º—É–ª—è—Ü–∏—è): –æ–∂–∏–¥–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞...')
          return
        }
      }
      console.log('‚úÖ MediaDevices API: OK')

      // Check getUserMedia availability
      if (!navigator.mediaDevices.getUserMedia) {
        console.warn('‚ö†Ô∏è getUserMedia –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø–æ—Ç–æ–∫–∞')
        if (captureMode === 'auto') {
          this.setupAutoScanning(videoElement, (result: ScanResult) => {
            if (this.isScanning) {
              onResult(result)
            }
          }, onError)
          console.log('‚úÖ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (—Å–∏–º—É–ª—è—Ü–∏—è)')
          return
        } else {
          console.log('üì∑ –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º (—Å–∏–º—É–ª—è—Ü–∏—è): –æ–∂–∏–¥–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞...')
          return
        }
      }
      console.log('‚úÖ getUserMedia: OK')

      // Get available video devices
      console.log('üìπ –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä...')
      const videoInputDevices = await this.reader.listVideoInputDevices()
      console.log('üìπ –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä:', videoInputDevices.length, videoInputDevices.map(d => ({
        id: d.deviceId,
        label: d.label,
        kind: d.kind
      })))
      
      if (videoInputDevices.length === 0) {
        console.warn('‚ö†Ô∏è –ö–∞–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏')
        if (captureMode === 'auto') {
          this.setupAutoScanning(videoElement, (result: ScanResult) => {
            if (this.isScanning) {
              onResult(result)
            }
          }, onError)
          console.log('‚úÖ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (—Å–∏–º—É–ª—è—Ü–∏—è)')
          return
        } else {
          console.log('üì∑ –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º (—Å–∏–º—É–ª—è—Ü–∏—è): –æ–∂–∏–¥–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞...')
          return
        }
      }

      // Prefer explicit user selection if provided
      const userSelected = deviceId ? videoInputDevices.find(d => d.deviceId === deviceId) : undefined

      // Prefer back camera for mobile devices (main camera only)
      const backCamera = videoInputDevices.find(device => 
        device.label.toLowerCase().includes('back') ||
        device.label.toLowerCase().includes('rear') ||
        device.label.toLowerCase().includes('environment') ||
        device.label.toLowerCase().includes('main')
      )
      
      const selectedDeviceEntry = userSelected || backCamera || videoInputDevices[0]
      console.log('üì∑ –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞–º–µ—Ä–∞:', {
        label: selectedDeviceEntry.label,
        id: selectedDeviceEntry.deviceId,
        source: userSelected ? 'user-selected' : backCamera ? 'back-camera' : 'first-available'
      })

      // Detect mobile device
      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
      console.log('üì± –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', isMobile)

      // Get optimal camera constraints
      const constraints = this.getOptimalCameraConstraints(selectedDeviceEntry.deviceId, isMobile)
      console.log('üé• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã:', constraints)

      // Start continuous decoding using decodeFromConstraints for proper continuous scanning
      console.log('üîç –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤...')
      
      // Clear any existing stream first
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞...')
      videoElement.srcObject = null
      
      // Check video element state
      console.log('üì∫ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', {
        readyState: videoElement.readyState,
        videoWidth: videoElement.videoWidth,
        videoHeight: videoElement.videoHeight,
        paused: videoElement.paused,
        ended: videoElement.ended,
        muted: videoElement.muted,
        autoplay: videoElement.autoplay,
        playsInline: videoElement.playsInline
      })
      
      // Use decodeFromConstraints for continuous scanning with fallback logic
      console.log('üîÑ –ó–∞–ø—É—Å–∫ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏...')
      
      /* resultCallback removed - unused */

      // Try different constraint levels with fallback
      const constraintsToTry = [
        { name: 'optimal', constraints },
        { name: 'basic', constraints: this.getBasicCameraConstraints(selectedDeviceEntry.deviceId) },
        { name: 'minimal', constraints: this.getMinimalCameraConstraints(selectedDeviceEntry.deviceId) }
      ]

      for (const { name, constraints: currentConstraints } of constraintsToTry) {
        try {
          console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å ${name} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏:`, JSON.stringify(currentConstraints, null, 2))
          
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ getUserMedia
          console.log('üé• –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ —á–µ—Ä–µ–∑ getUserMedia...')
          const stream = await navigator.mediaDevices.getUserMedia(currentConstraints)
          console.log('‚úÖ –ü–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω:', {
            active: stream.active,
            id: stream.id,
            tracks: stream.getTracks().map(track => {
              let settings = {}
              try {
                settings = track.getSettings ? track.getSettings() : {}
              } catch (error) {
                console.warn('Failed to get track settings:', error)
                settings = {}
              }
              return {
                kind: track.kind,
                label: track.label,
                enabled: track.enabled,
                readyState: track.readyState,
                muted: track.muted,
                settings: settings
              }
            })
          })
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –≤ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
          console.log('üé¨ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ –≤ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç...')
          // Ensure required attributes for mobile browsers before attaching stream
          try {
            videoElement.autoplay = true
            videoElement.muted = true
            videoElement.playsInline = true
          } catch (attrErr) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã –≤–∏–¥–µ–æ:', attrErr)
          }
          videoElement.srcObject = stream
          this.currentStream = stream
          this.currentVideoElement = videoElement
          
          // –ó–∞–ø—É—Å–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ
          console.log('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ...')
          try {
            const playPromise = videoElement.play()
            if (playPromise !== undefined) {
              await playPromise
              console.log('‚úÖ –í–∏–¥–µ–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è')
            }
          } catch (playError) {
            console.warn('‚ö†Ô∏è Video play was interrupted or failed:', playError)
            // Don't throw error, just log it as this is often expected behavior
          }
          
          // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          if (captureMode === 'auto') {
            this.setupAutoScanning(videoElement, onResult, onError)
          }
          
          // –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
          break
        } catch (err: any) {
          const errName = err.name || 'UnknownError'
          const lower = (err.message || '').toLowerCase()

          // Treat busy/notreadable errors as access issues (tests expect immediate error notification)
          if (
            errName === 'NotReadableError' ||
            errName === 'TrackStartError' ||
            lower.includes('busy') ||
            lower.includes('notreadable')
          ) {
            if (onError) {
              onError(new Error(`–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ: ${err.message || '–∫–∞–º–µ—Ä–∞ –∑–∞–Ω—è—Ç–∞'}`))
            }
            if (name !== 'minimal') {
              console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ (busy/notreadable)...')
              continue
            }
          }

          // Handle specific errors and decide whether to continue to next constraints
          if (errName === 'OverconstrainedError') {
            console.log(`üîÑ –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π...`)
            continue
          }

          // Permission errors: report and try next constraints (tests expect retry)
          if (errName === 'NotAllowedError' || errName === 'PermissionDeniedError') {
            if (onError) {
              onError(new Error(`–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ: ${err.message || '–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}`))
            }
            if (name !== 'minimal') {
              console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞...')
              continue
            }
          }

          // Other errors: continue if not last, otherwise report and throw
          if (name !== 'minimal') {
            console.log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: ${errName}`)
            continue
          }

          console.error('‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω—ã')
          if (onError) {
            onError(new Error(`–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${err.message}`))
          }
          throw new Error(`–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${err.message}`)
        }
      }
      
      console.log('‚úÖ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ')
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
      this.isScanning = false
      this.stopCurrentStream(this.currentVideoElement || undefined)
      
      const errorMessage = this.getErrorMessage(error as Error)
      console.error('‚ùå –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', errorMessage)
      const enhancedError = new Error(errorMessage)
      
      if (onError) {
        onError(enhancedError)
      }
      throw enhancedError
    }
  }

  private getErrorMessage(error: Error): string {
    switch (error.name) {
      case 'NotAllowedError':
      case 'PermissionDeniedError':
        return '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ: –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.'
      case 'NotFoundError':
      case 'DevicesNotFoundError':
        return '–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.'
      case 'NotReadableError':
      case 'TrackStartError':
        return '–ö–∞–º–µ—Ä–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º. –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –∫–∞–º–µ—Ä—É, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
      case 'OverconstrainedError':
      case 'ConstraintNotSatisfiedError':
        return '–ö–∞–º–µ—Ä–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç—Ä–µ–±—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞–º–µ—Ä—É.'
      case 'NotSupportedError':
        return '–ö–∞–º–µ—Ä–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏–ª–∏ –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ.'
      case 'AbortError':
        return '–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω.'
      case 'SecurityError':
        return '–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTPS.'
      default:
        return `–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ.'}`
    }
  }

  private stopCurrentStream(videoElement?: HTMLVideoElement): void {
    try {
      // –û—á–∏—â–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      if (this.videoHealthInterval) {
        clearInterval(this.videoHealthInterval)
        this.videoHealthInterval = null
      }
      // Stop all tracks from the current stream if it exists
      if (this.currentStream) {
        this.currentStream.getTracks().forEach(track => {
          track.stop()
          console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç—Ä–µ–∫ –∫–∞–º–µ—Ä—ã:', track.kind)
        })
        this.currentStream = null
      }
      // Clear video element source
      if (videoElement) {
        videoElement.srcObject = null
        console.log('üßπ –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –æ—á–∏—â–µ–Ω')
      }
    } catch (stopErr) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞:', stopErr)
    }
  }

  async scanFromImage(imageFile: File): Promise<ScanResult> {
    try {
      // Validate file type
      if (!imageFile.type.startsWith('image/')) {
        throw new Error('Please select a valid image file')
      }

      // Check file size (limit to 10MB)
      if (imageFile.size > 10 * 1024 * 1024) {
        throw new Error('Image file is too large. Please select an image smaller than 10MB')
      }

      const result = await this.reader.decodeFromImageElement(
        await this.createImageElement(imageFile)
      )

      if (!result) {
        throw new Error('No barcode or QR code found in the image. Please try a clearer image.')
      }

      const text = result.getText()
      const format = result.getBarcodeFormat()

      if (!text || !format) {
        throw new Error('Invalid barcode data found. Please try a different image.')
      }

      return {
        text: text,
        format: format.toString(),
        timestamp: new Date()
      }
    } catch (error) {
      const err = error as Error
      if (err.message.includes('No MultiFormat Readers')) {
        throw new Error('No barcode or QR code found in the image. Please try a clearer image.')
      }
      throw new Error(`Failed to scan image: ${err.message}`)
    }
  }

  private createImageElement(file: File): Promise<HTMLImageElement> {
    return new Promise((resolve, reject) => {
      const img = new Image()
      const url = URL.createObjectURL(file)
      
      img.onload = () => {
        URL.revokeObjectURL(url)
        resolve(img)
      }
      
      img.onerror = () => {
        URL.revokeObjectURL(url)
        reject(new Error('Failed to load image'))
      }
      
      img.src = url
    })
  }

  private setupAutoScanning(
    videoElement: HTMLVideoElement,
    onResult: (result: ScanResult) => void,
    onError?: (error: Error) => void
  ): void {
    console.log('üîÑ setupAutoScanning: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...')
    
    if (this.autoScanInterval) {
      console.log('üîÑ setupAutoScanning: –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞')
      clearInterval(this.autoScanInterval)
    }

    let consecutiveErrors = 0
    const maxConsecutiveErrors = 5
    let scanAttempts = 0

    this.autoScanInterval = setInterval(async () => {
      scanAttempts++
      console.log(`üîç setupAutoScanning: –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #${scanAttempts}`)
      
      try {
        const result = await this.captureFrame()
        
        if (result) {
          console.log('‚úÖ setupAutoScanning: –®—Ç—Ä–∏—Ö-–∫–æ–¥ –Ω–∞–π–¥–µ–Ω!', result)
          consecutiveErrors = 0 // Reset error counter on success
          onResult(result)
        } else {
          // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ –∫–∞–∫ –æ—à–∏–±–∫—É - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
          if (scanAttempts % 20 === 0) { // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 20 –ø–æ–ø—ã—Ç–æ–∫ (6 —Å–µ–∫—É–Ω–¥)
            console.log(`üîç setupAutoScanning: ${scanAttempts} –ø–æ–ø—ã—Ç–æ–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —à—Ç—Ä–∏—Ö-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω`)
          }
        }
      } catch (error) {
        consecutiveErrors++
        console.error(`‚ùå setupAutoScanning: –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #${consecutiveErrors}:`, error)
        
        if (consecutiveErrors >= maxConsecutiveErrors) {
          console.error('üö´ setupAutoScanning: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
          this.stopScanning()
          if (onError) {
            onError(error instanceof Error ? error : new Error(String(error)))
          }
          return
        }
      }
    }, 300) // Scan every 300ms

    console.log('‚úÖ setupAutoScanning: –ê–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 300ms)')
  }

  stopScanning(): void {
    if (this.isScanning) {
      console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...')
      this.isScanning = false
      
      // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      if (this.autoScanInterval) {
        clearInterval(this.autoScanInterval)
        this.autoScanInterval = null
        console.log('üõë –ê–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
      }
      
      this.reader.reset()
      this.stopCurrentStream(this.currentVideoElement || undefined)
      this.currentVideoElement = null
      console.log('‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    }
  }

  isCurrentlyScanning(): boolean {
    return this.isScanning
  }

  // Capture a single frame and attempt to decode barcode
  async captureFrame(): Promise<ScanResult | null> {
    console.log('üì∏ captureFrame: –ù–∞—á–∞–ª–æ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–∞')
    
    if (!this.currentVideoElement || !this.isScanning) {
      console.log('üö´ captureFrame: –Ω–µ—Ç –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', {
        hasVideo: !!this.currentVideoElement,
        isScanning: this.isScanning
      })
      return null
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞—Ö–≤–∞—Ç—É
    if (this.currentVideoElement.readyState < 2) {
      console.log('üö´ captureFrame: –≤–∏–¥–µ–æ –Ω–µ –≥–æ—Ç–æ–≤–æ (readyState:', this.currentVideoElement.readyState, ')')
      return null
    }

    console.log('üìπ captureFrame: –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ, —Ä–∞–∑–º–µ—Ä—ã:', {
      videoWidth: this.currentVideoElement.videoWidth,
      videoHeight: this.currentVideoElement.videoHeight,
      readyState: this.currentVideoElement.readyState
    })

    try {
      // Create a canvas to capture the current video frame
      const canvas = document.createElement('canvas')
      const ctx = canvas.getContext('2d')
      
      if (!ctx) {
        console.log('üö´ captureFrame: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç canvas')
        return null
      }

      // Set canvas size to match video, fallback to default if zero
      const vw = this.currentVideoElement.videoWidth || 640
      const vh = this.currentVideoElement.videoHeight || 480
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ –≤–∞–ª–∏–¥–Ω—ã
      if (vw === 0 || vh === 0) {
        console.log('üö´ captureFrame: –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ:', vw, 'x', vh)
        return null
      }
      
      canvas.width = vw
      canvas.height = vh

      console.log('üñºÔ∏è captureFrame: Canvas —Å–æ–∑–¥–∞–Ω', { width: vw, height: vh })

      // Draw current video frame to canvas
      try {
        ctx.drawImage(this.currentVideoElement, 0, 0, canvas.width, canvas.height)
        console.log('üì∏ captureFrame: –∫–∞–¥—Ä –∑–∞—Ö–≤–∞—á–µ–Ω', canvas.width, 'x', canvas.height)
      } catch (drawErr) {
        console.log('üö´ captureFrame: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏–∏ –∫–∞–¥—Ä–∞:', drawErr)
        return null
      }

      // Create image element from canvas data URL
      console.log('üîÑ captureFrame: –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ canvas...')
      const dataUrl = canvas.toDataURL('image/png')
      const imageElement = await new Promise<HTMLImageElement>((resolve, reject) => {
        const img = new Image()
        img.onload = () => {
          console.log('‚úÖ captureFrame: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ')
          resolve(img)
        }
        img.onerror = (err) => {
          console.error('‚ùå captureFrame: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', err)
          reject(err)
        }
        img.src = dataUrl
      })
      
      // Try to decode from the image element
      console.log('üîç captureFrame: –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ ZXing...')
      const result = await this.reader.decodeFromImageElement(imageElement)
      
      if (result) {
        const text = result.getText()
        const format = result.getBarcodeFormat()
        
        if (text && format) {
          console.log('üéØ captureFrame: —à—Ç—Ä–∏—Ö-–∫–æ–¥ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ ImageElement:', text, format.toString())
          return {
            text: text,
            format: format.toString(),
            timestamp: new Date()
          }
        }
      }
      
      console.log('üîç captureFrame: –®—Ç—Ä–∏—Ö-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–¥—Ä–µ')
      return null
    } catch (error: unknown) {
      const name = typeof error === 'object' && error && 'name' in error ? (error as { name?: string }).name : undefined
      const msg = typeof error === 'object' && error && 'message' in error ? String((error as { message?: unknown }).message) : String(error)
      
      // –ü–æ–¥–∞–≤–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ –≤ –∫–∞–¥—Ä–µ
      if (name === 'NotFoundException' || /No MultiFormat Readers/.test(msg) || /not found/i.test(msg)) {
        console.log('üîç captureFrame: ZXing –Ω–µ –Ω–∞—à–µ–ª —à—Ç—Ä–∏—Ö-–∫–æ–¥ (NotFoundException)')
        return null
      }
      
      console.error('üö´ captureFrame: –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', {
        name,
        message: msg,
        error
      })
      // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã onError –≤ setupAutoScanning —Å—Ä–∞–±–æ—Ç–∞–ª
      throw (error instanceof Error ? error : new Error(String(error)))
    }
  }

  async getVideoDevices(): Promise<MediaDeviceInfo[]> {
    try {
        if (typeof navigator === 'undefined' || !(navigator as NavigatorWithMediaDevices).mediaDevices) {
          return []
        }

        // Check permissions first
        const permissionStatus = await this.checkCameraPermission()
        if (!permissionStatus.granted && permissionStatus.denied) {
          console.warn('Camera permission denied, cannot enumerate devices')
          return []
        }

        const devices = await (navigator as NavigatorWithMediaDevices).mediaDevices.enumerateDevices()
        const videoDevices = devices.filter(device => device.kind === 'videoinput')
        
        // If no labels are available, request permission to get device labels
        if (videoDevices.length > 0 && !videoDevices[0].label) {
          try {
            const stream = await (navigator as NavigatorWithMediaDevices).mediaDevices.getUserMedia({ video: true })
            stream.getTracks().forEach((track: MediaStreamTrack) => track.stop())
            // Re-enumerate to get labels
            const devicesWithLabels = await (navigator as NavigatorWithMediaDevices).mediaDevices.enumerateDevices()
            return devicesWithLabels.filter(device => device.kind === 'videoinput')
          } catch (error) {
            console.warn('Could not get device labels:', error)
          }
        }
      
      return videoDevices
    } catch (error) {
      console.error('Error getting video devices:', error)
      return []
    }
  }

  // Get diagnostic information for troubleshooting
  async getDiagnosticInfo(): Promise<{
    cameraSupported: boolean
    secureContext: boolean
    permissionStatus: CameraPermissionStatus
    videoDevices: MediaDeviceInfo[]
    userAgent: string
    platform: string
  }> {
    const permissionStatus = await this.checkCameraPermission()
    const videoDevices = await this.getVideoDevices()

    return {
      cameraSupported: BarcodeScanner.isCameraSupported(),
      secureContext: BarcodeScanner.isSecureContext(),
      permissionStatus,
      videoDevices,
      userAgent: navigator.userAgent,
      platform: navigator.platform
    }
  }
}

// Export a singleton instance
export const barcodeScanner = new BarcodeScanner()