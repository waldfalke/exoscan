/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ BarcodeDetector API
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ª—É—á—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
 */

import { ScannerService, ScanResult, ScannerCapabilities, CameraPermissionStatus } from './ScannerService'

// –¢–∏–ø—ã –¥–ª—è BarcodeDetector API
interface DetectedBarcode {
  boundingBox: DOMRectReadOnly
  cornerPoints: Array<{ x: number; y: number }>
  format: string
  rawValue: string
}

interface BarcodeDetectorOptions {
  formats?: string[]
}

declare global {
  interface Window {
    BarcodeDetector?: {
      new (options?: BarcodeDetectorOptions): BarcodeDetector
      getSupportedFormats(): Promise<string[]>
    }
  }
}

interface BarcodeDetector {
  detect(image: ImageBitmapSource): Promise<DetectedBarcode[]>
}

export class BarcodeDetectorService extends ScannerService {
  private detector: BarcodeDetector | null = null
  private currentVideoElement: HTMLVideoElement | null = null
  private autoScanInterval: NodeJS.Timeout | null = null
  private supportedFormats: string[] = []
  private currentCameraId: string | null = null
  private isInitialized: boolean = false
  private isDisposed: boolean = false

  constructor(config = {}) {
    super(config)
  }

  async initialize(): Promise<void> {
    this.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BarcodeDetector —Å–∫–∞–Ω–µ—Ä–∞...')
    
    if (!this.isSupported()) {
      throw new Error('BarcodeDetector API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ')
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
      this.supportedFormats = await window.BarcodeDetector!.getSupportedFormats()
      this.log('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:', this.supportedFormats)

      // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å –Ω—É–∂–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
      const formats = this.config.formats || this.supportedFormats
      this.detector = new window.BarcodeDetector!({ formats })
      
      this.isInitialized = true
      this.log('BarcodeDetector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
    } catch (error) {
      this.logError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BarcodeDetector:', error)
      throw error
    }
  }

  static isSupported(): boolean {
    return 'BarcodeDetector' in window
  }

  private isSupported(): boolean {
    return BarcodeDetectorService.isSupported()
  }

  async getCapabilities(): Promise<ScannerCapabilities> {
    if (!this.detector) {
      await this.initialize()
    }

    return {
      supportedFormats: this.supportedFormats,
      supportsFlashlight: true, // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–∞–º–µ—Ä—ã
      supportsZoom: true,
      supportsFocus: true,
      maxZoom: 3
    }
  }

  async startScanning(
    videoElement: HTMLVideoElement,
    onResult: (result: ScanResult) => void,
    onError?: (error: Error) => void
  ): Promise<void> {
    if (this.isScanning) {
      this.log('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ')
      return
    }

    if (!this.detector) {
      await this.initialize()
    }

    this.currentVideoElement = videoElement
    this.isScanning = true

    try {
      this.log('–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å BarcodeDetector...')
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç–æ–∫ –∫–∞–º–µ—Ä—ã
      const stream = await this.getCameraStream()
      this.currentStream = stream
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
      try {
        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        videoElement.autoplay = true
        videoElement.muted = true
        videoElement.playsInline = true
        videoElement.setAttribute('playsinline', 'true')
        videoElement.setAttribute('webkit-playsinline', 'true')
        videoElement.controls = false
        
        this.log('–ú–æ–±–∏–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –≤–∏–¥–µ–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
      } catch (attrErr) {
        this.logError('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤–∏–¥–µ–æ:', attrErr)
      }
      
      videoElement.srcObject = stream
      await this.waitForVideoReady(videoElement)
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      if (this.config.autoScan) {
        this.setupAutoScanning(videoElement, onResult, onError)
      }
      
      this.log('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å BarcodeDetector –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')
      
    } catch (error) {
      this.isScanning = false
      this.logError('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
      if (onError) {
        onError(error as Error)
      }
      throw error
    }
  }

  stopScanning(): void {
    this.log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è BarcodeDetector...')
    
    this.isScanning = false
    
    if (this.autoScanInterval) {
      clearInterval(this.autoScanInterval)
      this.autoScanInterval = null
    }
    
    this.stopCurrentStream(this.currentVideoElement || undefined)
    this.currentVideoElement = null
    
    this.log('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ BarcodeDetector –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
  }

  async scanFromImage(imageFile: File): Promise<ScanResult> {
    this.log('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å BarcodeDetector...')
    
    if (!this.detector) {
      await this.initialize()
    }

    try {
      // –°–æ–∑–¥–∞–µ–º ImageBitmap –∏–∑ —Ñ–∞–π–ª–∞
      const imageBitmap = await createImageBitmap(imageFile)
      
      // –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º —à—Ç—Ä–∏—Ö-–∫–æ–¥—ã
      const detectedCodes = await this.detector!.detect(imageBitmap)
      
      if (detectedCodes.length === 0) {
        throw new Error('–®—Ç—Ä–∏—Ö-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏')
      }

      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–¥
      const code = detectedCodes[0]
      
      return {
        text: code.rawValue,
        format: code.format,
        timestamp: new Date(),
        boundingBox: {
          x: code.boundingBox.x,
          y: code.boundingBox.y,
          width: code.boundingBox.width,
          height: code.boundingBox.height
        },
        cornerPoints: code.cornerPoints
      }
    } catch (error) {
      this.logError('–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error)
      throw error
    }
  }

  async switchCamera(): Promise<void> {
    if (!this.isInitialized || this.isDisposed) {
      throw new Error('Scanner not initialized')
    }

    const cameras = await this.getAvailableCameras()
    if (cameras.length <= 1) {
      throw new Error('No additional cameras available')
    }

    const currentIndex = cameras.findIndex((camera: MediaDeviceInfo) => camera.deviceId === this.currentCameraId)
    const nextIndex = (currentIndex + 1) % cameras.length
    const nextCamera = cameras[nextIndex]

    // Stop current stream
    if (this.currentStream) {
      this.currentStream.getTracks().forEach(track => track.stop())
      this.currentStream = null
    }

    // Start with new camera
    this.currentCameraId = nextCamera.deviceId
    
    if (this.config.enableDiagnostics) {
      console.log('üîÑ BarcodeDetector: Switched to camera:', nextCamera.label || nextCamera.deviceId)
    }
  }

  getCurrentCameraId(): string | null {
    return this.currentCameraId
  }

  async getAvailableCameras(): Promise<MediaDeviceInfo[]> {
    try {
      return await this.getVideoDevices()
    } catch (error) {
      this.logError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä:', error)
      return []
    }
  }

  async getCameraPermissionStatus(): Promise<CameraPermissionStatus> {
    return await this.checkCameraPermission()
  }

  async setFlashlight(enabled: boolean): Promise<void> {
    if (!this.currentStream) {
      throw new Error('No active camera stream')
    }

    const track = this.currentStream.getVideoTracks()[0]
    if (!track) {
      throw new Error('No video track available')
    }

    try {
      const capabilities = track.getCapabilities()
      if ('torch' in capabilities && capabilities.torch) {
        await track.applyConstraints({
          advanced: [{ torch: enabled } as any]
        })
        
        if (this.config.enableDiagnostics) {
          console.log(`üî¶ BarcodeDetector: Flashlight ${enabled ? 'enabled' : 'disabled'}`)
        }
      } else {
        throw new Error('Flashlight not supported')
      }
    } catch (error) {
      if (this.config.enableDiagnostics) {
        console.error('‚ùå BarcodeDetector: Flashlight error:', error)
      }
      throw error
    }
  }

  async setZoom(level: number): Promise<void> {
    if (!this.currentStream) {
      throw new Error('No active camera stream')
    }

    const track = this.currentStream.getVideoTracks()[0]
    if (!track) {
      throw new Error('No video track available')
    }

    try {
      const capabilities = track.getCapabilities()
      if ('zoom' in capabilities && capabilities.zoom) {
        const zoomCapability = capabilities.zoom as { min: number; max: number }
        const { min, max } = zoomCapability
        const clampedZoom = Math.max(min, Math.min(max, level))
        
        await track.applyConstraints({
          advanced: [{ zoom: clampedZoom } as any]
        })
        
        if (this.config.enableDiagnostics) {
          console.log(`üîç BarcodeDetector: Zoom set to ${clampedZoom}x`)
        }
      } else {
        throw new Error('Zoom not supported')
      }
    } catch (error) {
      if (this.config.enableDiagnostics) {
        console.error('‚ùå BarcodeDetector: Zoom error:', error)
      }
      throw error
    }
  }

  async dispose(): Promise<void> {
    this.stopScanning()
    
    if (this.currentStream) {
      this.currentStream.getTracks().forEach(track => track.stop())
      this.currentStream = null
    }
    
    this.detector = null
    this.isDisposed = true
    
    if (this.config.enableDiagnostics) {
      console.log('üóëÔ∏è BarcodeDetector Scanner disposed')
    }
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private async getCameraStream(): Promise<MediaStream> {
    const constraints: MediaStreamConstraints = {
      video: {
        facingMode: { ideal: 'environment' },
        width: { ideal: 1920, max: 1920 },
        height: { ideal: 1080, max: 1080 },
        frameRate: { ideal: 30 }
      }
    }

    try {
      return await navigator.mediaDevices.getUserMedia(constraints)
    } catch (error) {
      this.logError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã:', error)
      // Fallback –∫ –±–∞–∑–æ–≤—ã–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º
      return await navigator.mediaDevices.getUserMedia({ video: true })
    }
  }

  private async waitForVideoReady(videoElement: HTMLVideoElement): Promise<void> {
    return new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        reject(new Error('–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ'))
      }, 10000)

      const cleanup = () => {
        clearTimeout(timeout)
        videoElement.removeEventListener('loadedmetadata', onLoadedMetadata)
        videoElement.removeEventListener('canplay', onCanPlay)
        videoElement.removeEventListener('error', onError)
      }

      const onLoadedMetadata = () => {
        this.log('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
        // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ä–∞–∑—É, –∂–¥–µ–º canplay
      }

      const onCanPlay = () => {
        this.log('–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é')
        cleanup()
        
        // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        videoElement.play().then(() => {
          this.log('–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ')
          resolve()
        }).catch((playError) => {
          this.logError('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ:', playError)
          // –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
          // –Ω–æ –≤–∏–¥–µ–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
          resolve()
        })
      }

      const onError = (error: any) => {
        this.logError('–û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', error)
        cleanup()
        reject(error)
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤–æ –ª–∏ –≤–∏–¥–µ–æ —É–∂–µ
      if (videoElement.readyState >= 3) { // HAVE_FUTURE_DATA
        this.log('–í–∏–¥–µ–æ —É–∂–µ –≥–æ—Ç–æ–≤–æ')
        onCanPlay()
        return
      }

      videoElement.addEventListener('loadedmetadata', onLoadedMetadata)
      videoElement.addEventListener('canplay', onCanPlay)
      videoElement.addEventListener('error', onError)
    })
  }

  private setupAutoScanning(
    videoElement: HTMLVideoElement,
    onResult: (result: ScanResult) => void,
    onError?: (error: Error) => void
  ): void {
    this.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è BarcodeDetector...')
    
    if (this.autoScanInterval) {
      clearInterval(this.autoScanInterval)
    }

    this.autoScanInterval = setInterval(async () => {
      if (!this.isScanning) {
        this.log('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
        return
      }

      try {
        this.log('–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è BarcodeDetector...')
        const result = await this.captureFrame(videoElement)
        if (result) {
          this.log('–®—Ç—Ä–∏—Ö-–∫–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω BarcodeDetector:', result)
          onResult(result)
        }
      } catch (error) {
        this.logError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è BarcodeDetector:', error)
        if (onError) {
          onError(error as Error)
        }
      }
    }, this.config.scanInterval)
  }

  private async captureFrame(videoElement: HTMLVideoElement): Promise<ScanResult | null> {
    this.log('–ó–∞—Ö–≤–∞—Ç –∫–∞–¥—Ä–∞ –¥–ª—è BarcodeDetector...')
    
    if (!videoElement || videoElement.readyState !== 4) {
      this.log('–í–∏–¥–µ–æ –Ω–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–∞')
      return null
    }

    if (!this.detector) {
      this.logError('BarcodeDetector –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
      return null
    }

    try {
      // –°–æ–∑–¥–∞–µ–º ImageBitmap –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞
      const imageBitmap = await createImageBitmap(videoElement)
      
      this.log(`–†–∞–∑–º–µ—Ä—ã –∫–∞–¥—Ä–∞: ${imageBitmap.width}x${imageBitmap.height}`)
      
      // –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º —à—Ç—Ä–∏—Ö-–∫–æ–¥—ã
      const detectedCodes = await this.detector.detect(imageBitmap)
      
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
      imageBitmap.close()
      
      if (detectedCodes.length === 0) {
        this.log('–®—Ç—Ä–∏—Ö-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–¥—Ä–µ')
        return null
      }

      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–¥
      const code = detectedCodes[0]
      
      const scanResult: ScanResult = {
        text: code.rawValue,
        format: code.format,
        timestamp: new Date(),
        boundingBox: {
          x: code.boundingBox.x,
          y: code.boundingBox.y,
          width: code.boundingBox.width,
          height: code.boundingBox.height
        },
        cornerPoints: code.cornerPoints
      }
      
      this.log('BarcodeDetector –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', scanResult)
      return scanResult
      
    } catch (error) {
      this.logError('–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–∞ BarcodeDetector:', error)
      return null
    }
  }
}