/**
 * –§–∞–±—Ä–∏–∫–∞ —Å–∫–∞–Ω–µ—Ä–æ–≤ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
 */

import { ScannerService, ScannerConfig } from './ScannerService'
import { ZXingScannerService } from './ZXingScannerService'
import { BarcodeDetectorService } from './BarcodeDetectorService'

export * from './ScannerService'
export * from './ZXingScannerService'
export * from './BarcodeDetectorService'

export type ScannerType = 'auto' | 'zxing' | 'barcode-detector'

export interface ScannerFactoryConfig extends ScannerConfig {
  preferredType?: ScannerType
  fallbackToZXing?: boolean
}

export class ScannerFactory {
  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∫–∞–Ω–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
   */
  static async createScanner(config: ScannerFactoryConfig = {}): Promise<ScannerService> {
    const {
      preferredType = 'auto',
      fallbackToZXing = true,
      ...scannerConfig
    } = config

    // –í–∫–ª—é—á–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ
    const finalConfig = {
      ...scannerConfig,
      enableDiagnostics: scannerConfig.enableDiagnostics ?? true
    }

    console.log('üè≠ ScannerFactory: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–µ—Ä–∞...', {
      preferredType,
      fallbackToZXing,
      config: finalConfig
    })

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø
    if (preferredType !== 'auto') {
      return await ScannerFactory.createSpecificScanner(preferredType, finalConfig)
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞
    return await ScannerFactory.createBestAvailableScanner(finalConfig, fallbackToZXing)
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–∫–∞–Ω–µ—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
   */
  private static async createSpecificScanner(
    type: Exclude<ScannerType, 'auto'>,
    config: ScannerConfig
  ): Promise<ScannerService> {
    switch (type) {
      case 'barcode-detector':
        if (!BarcodeDetectorService.isSupported()) {
          throw new Error('BarcodeDetector API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ')
        }
        const barcodeDetectorService = new BarcodeDetectorService(config)
        await barcodeDetectorService.initialize()
        console.log('‚úÖ ScannerFactory: –°–æ–∑–¥–∞–Ω BarcodeDetectorService')
        return barcodeDetectorService

      case 'zxing':
        const zxingService = new ZXingScannerService(config)
        await zxingService.initialize()
        console.log('‚úÖ ScannerFactory: –°–æ–∑–¥–∞–Ω ZXingScannerService')
        return zxingService

      default:
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–∫–∞–Ω–µ—Ä–∞: ${type}`)
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–∫–∞–Ω–µ—Ä
   */
  private static async createBestAvailableScanner(
    config: ScannerConfig,
    fallbackToZXing: boolean
  ): Promise<ScannerService> {
    console.log('üîç ScannerFactory: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Å–∫–∞–Ω–µ—Ä–∞...')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö API
    const availability = await ScannerFactory.checkAvailability()
    console.log('üìä ScannerFactory: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API:', availability)

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: BarcodeDetector > ZXing
    if (availability.barcodeDetector) {
      try {
        console.log('üéØ ScannerFactory: –í—ã–±—Ä–∞–Ω BarcodeDetector (–Ω–∞—Ç–∏–≤–Ω—ã–π API)')
        const service = new BarcodeDetectorService(config)
        await service.initialize()
        return service
      } catch (error) {
        console.warn('‚ö†Ô∏è ScannerFactory: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BarcodeDetector:', error)
        if (!fallbackToZXing) {
          throw error
        }
      }
    }

    // Fallback –∫ ZXing
    if (fallbackToZXing) {
      console.log('üîÑ ScannerFactory: Fallback –∫ ZXing')
      const service = new ZXingScannerService(config)
      await service.initialize()
      return service
    }

    throw new Error('–ù–∏ –æ–¥–∏–Ω —Å–∫–∞–Ω–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω')
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö API —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  static async checkAvailability(): Promise<{
    barcodeDetector: boolean
    zxing: boolean
    camera: boolean
    secureContext: boolean
  }> {
    return {
      barcodeDetector: BarcodeDetectorService.isSupported(),
      zxing: true, // ZXing –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
      camera: ScannerService.isCameraSupported(),
      secureContext: ScannerService.isSecureContext()
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∫–∞–Ω–µ—Ä–æ–≤
   */
  static async getScannerCapabilities(): Promise<{
    barcodeDetector?: {
      supported: boolean
      formats?: string[]
    }
    zxing: {
      supported: boolean
      formats: string[]
    }
  }> {
    const result: any = {
      zxing: {
        supported: true,
        formats: [
          'QR_CODE', 'DATA_MATRIX', 'UPC_E', 'UPC_A', 'EAN_8', 'EAN_13',
          'CODE_128', 'CODE_39', 'CODE_93', 'CODABAR', 'ITF', 'RSS14',
          'RSS_EXPANDED', 'PDF_417', 'AZTEC', 'MAXICODE'
        ]
      }
    }

    if (BarcodeDetectorService.isSupported()) {
      try {
        const formats = await window.BarcodeDetector!.getSupportedFormats()
        result.barcodeDetector = {
          supported: true,
          formats
        }
      } catch (error) {
        result.barcodeDetector = {
          supported: false
        }
      }
    } else {
      result.barcodeDetector = {
        supported: false
      }
    }

    return result
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–∫–∞–Ω–µ—Ä –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  static async createProductionScanner(config: ScannerConfig = {}): Promise<ScannerService> {
    return await ScannerFactory.createScanner({
      ...config,
      preferredType: 'auto',
      fallbackToZXing: true,
      enableDiagnostics: false // –û—Ç–∫–ª—é—á–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    })
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–∫–∞–Ω–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
   */
  static async createDevelopmentScanner(config: ScannerConfig = {}): Promise<ScannerService> {
    return await ScannerFactory.createScanner({
      ...config,
      preferredType: 'auto',
      fallbackToZXing: true,
      enableDiagnostics: true,
      scanInterval: 200 // –ë–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    })
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
let defaultScannerInstance: ScannerService | null = null

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∫–∞–Ω–µ—Ä–∞ (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
 */
export async function getDefaultScanner(): Promise<ScannerService> {
  if (!defaultScannerInstance) {
    defaultScannerInstance = await ScannerFactory.createProductionScanner()
  }
  return defaultScannerInstance
}

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∫–∞–Ω–µ—Ä–∞
 */
export function resetDefaultScanner(): void {
  if (defaultScannerInstance) {
    defaultScannerInstance.dispose()
    defaultScannerInstance = null
  }
}